<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Professional Trading Backtesting Log</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f8fafc;
            color: #1e293b;
            line-height: 1.6;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 24px;
        }

        .header {
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 12px;
            padding: 32px;
            margin-bottom: 24px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .header h1 {
            font-size: 28px;
            font-weight: 700;
            color: #0f172a;
            margin-bottom: 8px;
        }

        .header p {
            color: #64748b;
            font-size: 16px;
        }

        .main-grid {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 24px;
        }

        .left-panel {
            display: flex;
            flex-direction: column;
            gap: 24px;
        }

        .card {
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .card-header {
            padding: 20px 24px;
            border-bottom: 1px solid #e2e8f0;
        }

        .card-title {
            font-size: 18px;
            font-weight: 600;
            color: #0f172a;
        }

        .card-content {
            padding: 24px;
        }

        .input-section {
            padding: 0;
        }

        .trade-buttons {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 12px;
            margin-bottom: 24px;
        }

        .outcome-btn {
            padding: 12px 16px;
            border: 2px solid;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            background: white;
        }

        .win-btn {
            border-color: #22c55e;
            color: #22c55e;
        }

        .win-btn:hover {
            background: #22c55e;
            color: white;
        }

        .loss-btn {
            border-color: #ef4444;
            color: #ef4444;
        }

        .loss-btn:hover {
            background: #ef4444;
            color: white;
        }

        .partial-btn {
            border-color: #f59e0b;
            color: #f59e0b;
        }

        .no-trade-btn {
            border-color: #6b7280;
            color: #6b7280;
        }

        .no-trade-btn:hover {
            background: #6b7280;
            color: white;
        }

        .form-group {
            margin-bottom: 16px;
        }

        .form-label {
            display: block;
            font-size: 14px;
            font-weight: 500;
            color: #374151;
            margin-bottom: 6px;
        }

        .form-input {
            width: 100%;
            padding: 10px 12px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 14px;
            transition: border-color 0.2s ease;
        }

        .form-input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 16px;
        }

        .stat-card {
            padding: 20px;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            text-align: center;
            background: #fafafa;
        }

        .stat-value {
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 4px;
        }

        .stat-label {
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            color: #6b7280;
            font-weight: 500;
        }

        .win-rate { color: #22c55e; }
        .total-trades { color: #3b82f6; }
        .avg-rr { color: #8b5cf6; }
        .expectancy { color: #f59e0b; }

        .action-buttons {
            display: flex;
            gap: 12px;
            margin-top: 16px;
        }

        .btn {
            padding: 10px 16px;
            border: none;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .btn-primary {
            background: #3b82f6;
            color: white;
        }

        .btn-primary:hover {
            background: #2563eb;
        }

        .btn-secondary {
            background: #6b7280;
            color: white;
        }

        .btn-secondary:hover {
            background: #4b5563;
        }

        .btn-danger {
            background: #ef4444;
            color: white;
        }

        .btn-danger:hover {
            background: #dc2626;
        }

        .trades-log {
            max-height: 600px;
            overflow-y: auto;
        }

        .trade-entry {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 16px 24px;
            border-bottom: 1px solid #f1f5f9;
            transition: background-color 0.2s ease;
        }

        .trade-entry:hover {
            background: #f8fafc;
        }

        .trade-info {
            flex: 1;
        }

        .trade-number {
            font-weight: 600;
            color: #0f172a;
            font-size: 14px;
        }

        .trade-timestamp {
            font-size: 12px;
            color: #64748b;
            margin-top: 2px;
        }

        .trade-rr {
            font-weight: 500;
            color: #374151;
            margin: 0 20px;
        }

        .trade-outcome {
            padding: 4px 12px;
            border-radius: 16px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-right: 12px;
        }

        .outcome-win {
            background: #dcfce7;
            color: #166534;
        }

        .outcome-loss {
            background: #fee2e2;
            color: #991b1b;
        }

        .outcome-no-trade {
            background: #f3f4f6;
            color: #4b5563;
        }

        .trade-actions {
            display: flex;
            gap: 8px;
        }

        .btn-sm {
            padding: 6px 10px;
            font-size: 12px;
            border-radius: 4px;
        }

        .btn-edit {
            background: #f59e0b;
            color: white;
            border: none;
            cursor: pointer;
        }

        .btn-edit:hover {
            background: #d97706;
        }

        .btn-delete {
            background: #ef4444;
            color: white;
            border: none;
            cursor: pointer;
        }

        .btn-delete:hover {
            background: #dc2626;
        }

        .empty-state {
            text-align: center;
            padding: 48px 24px;
            color: #64748b;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
        }

        .modal-content {
            background: white;
            margin: 15% auto;
            padding: 24px;
            border-radius: 12px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
        }

        .modal-header {
            margin-bottom: 20px;
        }

        .modal-title {
            font-size: 18px;
            font-weight: 600;
            color: #0f172a;
        }

        .modal-actions {
            display: flex;
            justify-content: flex-end;
            gap: 12px;
            margin-top: 24px;
        }

        .close {
            float: right;
            font-size: 24px;
            font-weight: bold;
            cursor: pointer;
            color: #6b7280;
        }

        .close:hover {
            color: #374151;
        }

        @media (max-width: 1024px) {
            .main-grid {
                grid-template-columns: 1fr;
            }
            
            .stats-grid {
                grid-template-columns: repeat(4, 1fr);
            }
        }

        @media (max-width: 640px) {
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .trade-entry {
                flex-direction: column;
                align-items: flex-start;
                gap: 12px;
            }
            
            .trade-actions {
                width: 100%;
                justify-content: flex-end;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Professional Trading Backtesting Log</h1>
            <p>Advanced trade analysis and performance tracking system</p>
        </div>

        <div class="main-grid">
            <div class="left-panel">
                <!-- Trade Input -->
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Log New Trade</h3>
                    </div>
                    <div class="card-content input-section">
                        <div class="trade-buttons" style="grid-template-columns: repeat(4, 1fr);">
                            <button class="outcome-btn win-btn" onclick="logTrade('win')">Win</button>
                            <button class="outcome-btn loss-btn" onclick="logTrade('loss')">Loss</button>
                            <button class="outcome-btn partial-btn" onclick="logTrade('partial')">Partial</button>
                            <button class="outcome-btn no-trade-btn" onclick="logTrade('no-trade')" style="border-color: #6b7280; color: #6b7280;">No Trade</button>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label" for="rrRatio">Risk:Reward Ratio</label>
                            <input type="number" id="rrRatio" class="form-input" step="0.1" min="0" value="2.0" placeholder="2.0">
                        </div>

                        <div class="form-group">
                            <label class="form-label" for="tradeNotes">Notes (Optional)</label>
                            <input type="text" id="tradeNotes" class="form-input" placeholder="Trade setup, strategy, etc.">
                        </div>
                    </div>
                </div>

                <!-- Statistics -->
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Performance Statistics</h3>
                    </div>
                    <div class="card-content">
                        <div class="stats-grid">
                            <div class="stat-card">
                                <div class="stat-value win-rate" id="winRate">0%</div>
                                <div class="stat-label">Win Rate</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-value total-trades" id="totalTrades">0</div>
                                <div class="stat-label">Total Trades</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-value avg-rr" id="avgRR">0.0</div>
                                <div class="stat-label">Avg R:R</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-value expectancy" id="expectancy">0.0</div>
                                <div class="stat-label">Expectancy</div>
                            </div>
                        </div>

                        <div class="action-buttons">
                            <input type="file" id="importFile" accept=".json" style="display: none;" onchange="importSession()">
                            <button class="btn btn-primary" onclick="downloadReport()">Download Report</button>
                            <button class="btn btn-secondary" onclick="downloadSession()">Save Session</button>
                            <button class="btn btn-secondary" onclick="document.getElementById('importFile').click()">Load Session</button>
                            <button class="btn btn-danger" onclick="clearTrades()">Clear All</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Trade History -->
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Trade History</h3>
                </div>
                <div class="trades-log" id="tradesLog">
                    <div class="empty-state">
                        <p>No trades logged yet.</p>
                        <p>Start by logging your first trade using the buttons on the left.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Trade Modal -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <span class="close" onclick="closeEditModal()">&times;</span>
                <h3 class="modal-title">Edit Trade</h3>
            </div>
            
            <div class="form-group">
                <label class="form-label">Outcome</label>
                <div class="trade-buttons" style="grid-template-columns: repeat(4, 1fr);">
                    <button class="outcome-btn win-btn" data-outcome="win">Win</button>
                    <button class="outcome-btn loss-btn" data-outcome="loss">Loss</button>
                    <button class="outcome-btn partial-btn" data-outcome="partial">Partial</button>
                    <button class="outcome-btn no-trade-btn" data-outcome="no-trade" style="border-color: #6b7280; color: #6b7280;">No Trade</button>
                </div>
            </div>

            <div class="form-group">
                <label class="form-label" for="editRR">Risk:Reward Ratio</label>
                <input type="number" id="editRR" class="form-input" step="0.1" min="0">
            </div>

            <div class="form-group">
                <label class="form-label" for="editNotes">Notes</label>
                <input type="text" id="editNotes" class="form-input">
            </div>

            <div class="modal-actions">
                <button class="btn btn-secondary" onclick="closeEditModal()">Cancel</button>
                <button class="btn btn-primary" onclick="saveEditedTrade()">Save Changes</button>
            </div>
        </div>
    </div>

    <script>
        let trades = [];
        let editingTradeId = null;
        let selectedOutcome = 'win';

        function logTrade(outcome) {
            const rrRatio = parseFloat(document.getElementById('rrRatio').value) || 0;
            const notes = document.getElementById('tradeNotes').value.trim();
            
            if (outcome !== 'no-trade' && rrRatio <= 0) {
                alert('Please enter a valid Risk:Reward ratio greater than 0');
                return;
            }

            const trade = {
                id: Date.now(),
                outcome: outcome,
                riskReward: outcome === 'no-trade' ? 0 : rrRatio,
                notes: notes
            };

            trades.push(trade);
            updateDisplay();
            
            // Clear inputs
            document.getElementById('rrRatio').value = '2.0';
            document.getElementById('tradeNotes').value = '';
        }

        function updateDisplay() {
            updateStats();
            updateTradesLog();
        }

        function updateStats() {
            const totalTrades = trades.length;
            const wins = trades.filter(t => t.outcome === 'win').length;
            const losses = trades.filter(t => t.outcome === 'loss').length;
            const partials = trades.filter(t => t.outcome === 'partial').length;
            const noTrades = trades.filter(t => t.outcome === 'no-trade').length;
            
            const actualTrades = totalTrades - noTrades;
            const winRate = actualTrades > 0 ? ((wins / actualTrades) * 100).toFixed(1) : 0;
            
            const avgRR = actualTrades > 0 ? 
                (trades.filter(t => t.outcome !== 'no-trade').reduce((sum, trade) => sum + trade.riskReward, 0) / actualTrades).toFixed(2) : 0;
            
            // Calculate expectancy (only on actual trades)
            let totalReturn = 0;
            trades.forEach(trade => {
                if (trade.outcome === 'win') {
                    totalReturn += trade.riskReward;
                } else if (trade.outcome === 'loss') {
                    totalReturn -= 1;
                } else if (trade.outcome === 'partial') {
                    totalReturn += trade.riskReward * 0.5;
                }
                // no-trade doesn't affect return
            });
            
            const expectancy = actualTrades > 0 ? (totalReturn / actualTrades).toFixed(2) : 0;

            document.getElementById('winRate').textContent = winRate + '%';
            document.getElementById('totalTrades').textContent = actualTrades;
            document.getElementById('avgRR').textContent = avgRR;
            document.getElementById('expectancy').textContent = expectancy;
        }

        function updateTradesLog() {
            const logContainer = document.getElementById('tradesLog');
            
            if (trades.length === 0) {
                logContainer.innerHTML = `
                    <div class="empty-state">
                        <p>No trades logged yet.</p>
                        <p>Start by logging your first trade using the buttons on the left.</p>
                    </div>
                `;
                return;
            }

            const reversedTrades = [...trades].reverse();
            
            logContainer.innerHTML = reversedTrades.map((trade, index) => `
                <div class="trade-entry">
                    <div class="trade-info">
                        <div class="trade-number">Entry #${index + 1}</div>
                        ${trade.notes ? `<div style="font-size: 12px; color: #6b7280; margin-top: 4px;">${trade.notes}</div>` : ''}
                    </div>
                    <div class="trade-rr">${trade.outcome === 'no-trade' ? 'No Trade' : `R:R ${trade.riskReward}`}</div>
                    <div class="trade-outcome outcome-${trade.outcome}">${trade.outcome === 'no-trade' ? 'No Trade' : trade.outcome}</div>
                    <div class="trade-actions">
                        <button class="btn btn-edit btn-sm" onclick="editTrade(${trade.id})">Edit</button>
                        <button class="btn btn-delete btn-sm" onclick="deleteTrade(${trade.id})">Delete</button>
                    </div>
                </div>
            `).join('');
        }

        function editTrade(tradeId) {
            const trade = trades.find(t => t.id === tradeId);
            if (!trade) return;

            editingTradeId = tradeId;
            selectedOutcome = trade.outcome;
            
            document.getElementById('editRR').value = trade.riskReward;
            document.getElementById('editNotes').value = trade.notes || '';
            
            // Update button states
            document.querySelectorAll('#editModal .outcome-btn').forEach(btn => {
                btn.classList.remove('active');
                if (btn.dataset.outcome === trade.outcome) {
                    btn.style.background = btn.style.borderColor;
                    btn.style.color = 'white';
                } else {
                    btn.style.background = 'white';
                    btn.style.color = btn.style.borderColor;
                }
            });
            
            document.getElementById('editModal').style.display = 'block';
        }

        function deleteTrade(tradeId) {
            if (confirm('Are you sure you want to delete this trade?')) {
                trades = trades.filter(t => t.id !== tradeId);
                updateDisplay();
            }
        }

        function closeEditModal() {
            document.getElementById('editModal').style.display = 'none';
            editingTradeId = null;
        }

        function saveEditedTrade() {
            const trade = trades.find(t => t.id === editingTradeId);
            if (!trade) return;

            const rrRatio = parseFloat(document.getElementById('editRR').value);
            const notes = document.getElementById('editNotes').value.trim();

            if (selectedOutcome !== 'no-trade' && rrRatio <= 0) {
                alert('Please enter a valid Risk:Reward ratio greater than 0');
                return;
            }

            trade.outcome = selectedOutcome;
            trade.riskReward = selectedOutcome === 'no-trade' ? 0 : rrRatio;
            trade.notes = notes;

            updateDisplay();
            closeEditModal();
        }

        function clearTrades() {
            if (trades.length === 0) return;
            
            if (confirm('Are you sure you want to clear all trades? This cannot be undone.')) {
                trades = [];
                updateDisplay();
            }
        }

        function downloadReport() {
            if (trades.length === 0) {
                alert('No trades to report on. Please log some trades first.');
                return;
            }

            const report = generateReport();
            const blob = new Blob([report], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = `trading-backtest-report-${new Date().toISOString().split('T')[0]}.txt`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        function downloadSession() {
            const sessionData = {
                trades: trades,
                version: "1.0",
                exportDate: new Date().toISOString(),
                type: "backtest_session"
            };

            const blob = new Blob([JSON.stringify(sessionData, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = `backtest-session-${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        function importSession() {
            const file = document.getElementById('importFile').files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const data = JSON.parse(e.target.result);
                    
                    if (data.type !== "backtest_session" || !data.trades) {
                        alert('Invalid session file format.');
                        return;
                    }

                    if (trades.length > 0) {
                        if (!confirm('This will replace your current session. Are you sure?')) {
                            return;
                        }
                    }

                    trades = data.trades;
                    updateDisplay();
                    alert(`Session loaded successfully! Imported ${trades.length} entries.`);
                    
                } catch (error) {
                    alert('Error reading session file. Please check the file format.');
                }
            };
            reader.readAsText(file);
            
            // Reset file input
            document.getElementById('importFile').value = '';
        }

        function generateReport() {
            const totalEntries = trades.length;
            const actualTrades = trades.filter(t => t.outcome !== 'no-trade').length;
            const noTrades = trades.filter(t => t.outcome === 'no-trade').length;
            const wins = trades.filter(t => t.outcome === 'win').length;
            const losses = trades.filter(t => t.outcome === 'loss').length;
            const partials = trades.filter(t => t.outcome === 'partial').length;
            const winRate = actualTrades > 0 ? ((wins / actualTrades) * 100).toFixed(1) : 0;
            const avgRR = actualTrades > 0 ? 
                (trades.filter(t => t.outcome !== 'no-trade').reduce((sum, trade) => sum + trade.riskReward, 0) / actualTrades).toFixed(2) : 0;
            
            let totalReturn = 0;
            trades.forEach(trade => {
                if (trade.outcome === 'win') {
                    totalReturn += trade.riskReward;
                } else if (trade.outcome === 'loss') {
                    totalReturn -= 1;
                } else if (trade.outcome === 'partial') {
                    totalReturn += trade.riskReward * 0.5;
                }
            });
            const expectancy = actualTrades > 0 ? (totalReturn / actualTrades).toFixed(2) : 0;

            let report = `TRADING BACKTEST PERFORMANCE REPORT
Generated: ${new Date().toLocaleString()}
========================================

SUMMARY STATISTICS:
- Total Entries: ${totalEntries}
- Actual Trades: ${actualTrades}
- No Trade Entries: ${noTrades}
- Win Rate: ${winRate}% (of actual trades)
- Average Risk:Reward Ratio: ${avgRR}
- Expectancy: ${expectancy}R per trade
- Total Return: ${totalReturn.toFixed(2)}R

BREAKDOWN:
- Wins: ${wins} (${actualTrades > 0 ? ((wins/actualTrades)*100).toFixed(1) : 0}%)
- Losses: ${losses} (${actualTrades > 0 ? ((losses/actualTrades)*100).toFixed(1) : 0}%)
- Partials: ${partials} (${actualTrades > 0 ? ((partials/actualTrades)*100).toFixed(1) : 0}%)
- No Trades: ${noTrades} (${((noTrades/totalEntries)*100).toFixed(1)}% of all entries)

DETAILED ENTRY LOG:
========================================
`;

            trades.forEach((trade, index) => {
                const profit = trade.outcome === 'win' ? `+${trade.riskReward}R` : 
                              trade.outcome === 'loss' ? '-1R' : 
                              trade.outcome === 'partial' ? `+${(trade.riskReward * 0.5).toFixed(2)}R` :
                              'No P&L';
                
                report += `Entry #${index + 1}
Outcome: ${trade.outcome.toUpperCase()} | R:R: ${trade.outcome === 'no-trade' ? 'N/A' : trade.riskReward} | P&L: ${profit}`;
                
                if (trade.notes) {
                    report += `\nNotes: ${trade.notes}`;
                }
                report += '\n\n';
            });

            report += `ANALYSIS FOR AI REVIEW:
========================================
This is a trading backtest log containing ${totalEntries} total entries (${actualTrades} actual trades, ${noTrades} no-trade decisions) with the following key metrics:
- Win rate of ${winRate}% on actual trades taken
- Average risk-reward ratio of ${avgRR}
- Expectancy of ${expectancy}R per trade
- Trade selection rate: ${actualTrades > 0 ? ((actualTrades/totalEntries)*100).toFixed(1) : 0}% (how often trades were taken vs passed)

Please analyze this data and provide insights on:
1. Trading performance and consistency
2. Risk management effectiveness 
3. Trade selection discipline (no-trade decisions)
4. Areas for improvement
5. Strategy recommendations
6. Statistical significance of the results

The expectancy calculation uses: Win trades = +RR, Loss trades = -1R, Partial trades = +0.5*RR, No trades = 0R`;

            return report;
        }

        // Modal event handlers
        document.querySelectorAll('#editModal .outcome-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                selectedOutcome = this.dataset.outcome;
                
                // Update button styles
                document.querySelectorAll('#editModal .outcome-btn').forEach(b => {
                    if (b === this) {
                        b.style.background = getComputedStyle(b).borderColor;
                        b.style.color = 'white';
                    } else {
                        b.style.background = 'white';
                        b.style.color = getComputedStyle(b).borderColor;
                    }
                });
            });
        });

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('editModal');
            if (event.target === modal) {
                closeEditModal();
            }
        };

        // Initialize display
        updateDisplay();
    </script>
</body>
</html>